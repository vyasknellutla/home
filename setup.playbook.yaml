---
- name: "Software Updates"
  hosts: localhost
  connection: local
  become_method: sudo
  vars:
    symlinks:
      # ansible
      - { src: ".local/share/ansible", dest: ".ansible", type: "dir" }
      # direnv
      - { src: ".profile", dest: ".config/direnv/direnvrc", type: "file" }
      # bash
      - { src: ".profile", dest: ".bashrc", type: "file" }
      - { src: ".profile", dest: ".bash_profile", type: "file" }
      - { src: ".logout", dest: ".bash_logout", type: "file" }
      # zsh
      - { src: ".profile", dest: ".login", type: "file" }
      - { src: ".profile", dest: ".zprofile", type: "file" }
      - { src: ".profile", dest: ".zshrc", type: "file" }
      # docker
      - { src: ".config/docker", dest: ".docker", type: "dir" }
      # gnupg
      - { src: ".config/gnupg", dest: ".gnupg", type: "dir" }
      # Hyper Terminal
      - { src: ".config/Hyper/.hyper.js", dest: ".hyper.js", type: "file" }
      # kubectl
      - { src: ".local/share/kube", dest: ".kube", type: "dir" }
      # ssh
      - { src: ".local/share/ssh", dest: ".ssh", type: "dir" }
      # terraform
      - { src: ".local/share/terraform", dest: ".terraform.d", type: "dir" }
      # VS Code
      # - { src: ".config/Code/User", dest: ".vscode-server/data/Machine" }
    empty_files:
      - { file_name: ".cloud-locale-test.skip" }
      - { file_name: ".sudo_as_admin_successful" }
  tasks:
    - name: Aptitude (apt) Package Manager
      block:
        - name: Upgrade all packages
          become: true
          apt:
            name: "*"
            state: latest
            update_cache: true
            force_apt_get: true
      when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

    - name: Zypper Package Manager
      block:
        - name: Upgrade all packages
          become: true
          zypper:
            name: "*"
            state: latest
      when: ansible_distribution == "openSUSE Leap"

    - name: Yellowdog Updater, Modified (yum) Package Manager
      block:
        - name: Upgrade all packages
          become: true
          yum:
            name: "*"
            state: latest
            update_cache: true
          when: ansible_distribution == "CentOS" or ansible_distribution == "Fedora"

    - name: Dandified YUM (dnf) Package Manager
      block:
        - name: Upgrade all packages
          become: true
          dnf:
            name: "*"
            state: latest
            update_cache: true
          when: ansible_distribution == "Fedora"

    - name: Dotfiles
      block:
        - name: Register if dotfiles is cloned
          stat:
            path: ~/.git/
          register: dotfiles_git_dir

        - name: If dotfiles isn't cloned, install dotfiles
          shell: | #!/bin/sh
            set -e
            set -u
            set -x

            git init "${HOME}"
            git remote add origin https://github.com/vyasknellutla/dotfiles.git
            git fetch origin
            git checkout --force -b master --track origin/master
          when: dotfiles_git_dir.stat.isdir is not defined
        - name: Check that dotfiles is cloned
          git:
            repo: "https://github.com/vyasknellutla/dotfiles.git"
            dest: ~/
            update: false

    - name: Homebrew
      block:
        - name: Workaround for cask sudo permissions
          shell: |
            #!/bin/sh
            set -e
            set -u
            set -x

            echo 'sudo check'
          become: true
        - name: Upgrades all Homebrew Casks except those tagged with 'latest'
          shell: |
            #!/bin/sh
            set -e
            set -u
            set -x

            brew bundle --global --verbose
            brew cask upgrade $(brew cask outdated --greedy --verbose | { grep -v 'latest' || true } | cut -d' ' -f1)
            brew bundle cleanup --global --force --verbose
            brew bundle check --global --verbose
          when: ansible_distribution == "MacOSX"

    # Pip
    - name: Install pip packages
      pip:
        name:
          - ansible
          - pipenv
        extra_args: --user
        state: latest

    # Symlinks
    - name: Create Symlinks
      file:
        src: "{{ lookup('env','HOME') }}/{{ item.src }}"
        dest: "{{ lookup('env','HOME') }}/{{ item.dest }}"
        state: link
        force: true
      loop: "{{ symlinks }}"

    # Empty files
    - name: Create empty files
      file:
        path: "{{ lookup('env','HOME') }}/{{ item.file_name }}"
        state: touch
        modification_time: preserve
        access_time: preserve
      loop: "{{ empty_files }}"
